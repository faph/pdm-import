/* 
 * The MIT License
 *
 * Copyright 2008-2019 Florenz A. P. Hollebrandse.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package hec.dssgui.plugins;

import hec.dssgui.ListSelection;
import java.awt.Cursor;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;

public class PdmDialog extends javax.swing.JDialog implements PropertyChangeListener {

   private static ListSelection listSelection;
   private InpsHandler inpsHandler;

   public PdmDialog(java.awt.Frame parent, boolean modal) {
      super(parent, modal);
      listSelection = (ListSelection) parent;
      initComponents();
      populateComponents();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {
      java.awt.GridBagConstraints gridBagConstraints;

      jLabel6 = new javax.swing.JLabel();
      browseButton = new javax.swing.JButton();
      InpCombo = new javax.swing.JComboBox();
      InpCombo.getEditor().getEditorComponent().addFocusListener(
         new FocusListener() {

            public void focusGained(FocusEvent arg0) {
               //
            }

            public void focusLost(FocusEvent arg0) {
               setComboFileFirstItem();
            }
         });
         importProgress = new javax.swing.JProgressBar();
         jLabel1 = new javax.swing.JLabel();
         buttonsPanel = new javax.swing.JPanel();
         okButton = new javax.swing.JButton();
         cancelButton = new javax.swing.JButton();
         jLabel2 = new javax.swing.JLabel();
         jSeparator1 = new javax.swing.JSeparator();
         jScrollPane1 = new javax.swing.JScrollPane();
         progressMessageText = new javax.swing.JTextArea();
         jLabel3 = new javax.swing.JLabel();

         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
         setTitle("Import PDM results");
         setResizable(false);
         getContentPane().setLayout(new java.awt.GridBagLayout());

         jLabel6.setText("Progress:");
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 4;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
         gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
         getContentPane().add(jLabel6, gridBagConstraints);

         browseButton.setText("...");
         browseButton.setPreferredSize(new java.awt.Dimension(23, 23));
         browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               browseButtonActionPerformed(evt);
            }
         });
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 5;
         gridBagConstraints.gridy = 0;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
         gridBagConstraints.insets = new java.awt.Insets(0, 5, 1, 10);
         getContentPane().add(browseButton, gridBagConstraints);

         InpCombo.setEditable(true);
         InpCombo.setMaximumRowCount(10);
         InpCombo.setLightWeightPopupEnabled(false);
         InpCombo.setMaximumSize(new java.awt.Dimension(800, 50));
         InpCombo.setMinimumSize(new java.awt.Dimension(200, 20));
         InpCombo.setOpaque(false);
         InpCombo.setPreferredSize(new java.awt.Dimension(350, 22));
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 1;
         gridBagConstraints.gridy = 0;
         gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
         gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
         gridBagConstraints.insets = new java.awt.Insets(0, 5, 1, 40);
         getContentPane().add(InpCombo, gridBagConstraints);

         importProgress.setFocusable(false);
         importProgress.setMaximumSize(new java.awt.Dimension(800, 21));
         importProgress.setStringPainted(true);
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 5;
         gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
         gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
         gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 10);
         getContentPane().add(importProgress, gridBagConstraints);

         jLabel1.setText("Inp-file:");
         jLabel1.setMinimumSize(new java.awt.Dimension(20, 14));
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 0;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
         gridBagConstraints.insets = new java.awt.Insets(15, 10, 5, 0);
         getContentPane().add(jLabel1, gridBagConstraints);

         buttonsPanel.setLayout(new java.awt.GridBagLayout());

         okButton.setText("Import");
         okButton.setMinimumSize(new java.awt.Dimension(80, 23));
         okButton.setPreferredSize(new java.awt.Dimension(80, 23));
         okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               okButtonActionPerformed(evt);
            }
         });
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 0;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
         buttonsPanel.add(okButton, gridBagConstraints);

         cancelButton.setText("Close");
         cancelButton.setMinimumSize(new java.awt.Dimension(80, 23));
         cancelButton.setPreferredSize(new java.awt.Dimension(80, 23));
         cancelButton.setSelected(true);
         cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               cancelButtonActionPerformed(evt);
            }
         });
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 1;
         gridBagConstraints.gridy = 0;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
         gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
         buttonsPanel.add(cancelButton, gridBagConstraints);

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 1;
         gridBagConstraints.gridy = 8;
         gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
         gridBagConstraints.insets = new java.awt.Insets(20, 0, 10, 10);
         getContentPane().add(buttonsPanel, gridBagConstraints);

         jLabel2.setText("(recommended format: Watershed_Location.inp)");
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 1;
         gridBagConstraints.gridy = 1;
         gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
         gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
         getContentPane().add(jLabel2, gridBagConstraints);
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 3;
         gridBagConstraints.gridwidth = 6;
         gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
         gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
         getContentPane().add(jSeparator1, gridBagConstraints);

         progressMessageText.setColumns(20);
         progressMessageText.setRows(10);
         jScrollPane1.setViewportView(progressMessageText);

         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 7;
         gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
         gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
         gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 10);
         getContentPane().add(jScrollPane1, gridBagConstraints);

         jLabel3.setText("Messages:");
         gridBagConstraints = new java.awt.GridBagConstraints();
         gridBagConstraints.gridx = 0;
         gridBagConstraints.gridy = 6;
         gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
         getContentPane().add(jLabel3, gridBagConstraints);

         pack();
      }// </editor-fold>//GEN-END:initComponents
   public void propertyChange(PropertyChangeEvent propertyChangeEvent) {
      String propertyName = propertyChangeEvent.getPropertyName();

      if ("progress".equals(propertyName)) {
         Integer prog = (Integer) propertyChangeEvent.getNewValue();
         importProgress.setValue(prog.intValue());
      } else if ("message".equals(propertyName)) {
         String message = (String) propertyChangeEvent.getNewValue();
         progressMessageText.append(message + "\n");
      }
   }

   private void populateComponents() {
      inpsHandler = new InpsHandler(InpCombo);
   }

   private void setComboFileFirstItem() {
      if (InpCombo.getItemCount() > 0) {
         inpsHandler.moveToTop(InpCombo.getSelectedIndex());
      }
   }

   private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
      okButton.setEnabled(false);
      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      importProgress.setValue(0);
      importProgress.setIndeterminate(true);

      final PdmImporter pdmImporter = new PdmImporter(listSelection.getDSSFilename(),
              inpsHandler.getInpFile(InpCombo.getSelectedIndex()));
      pdmImporter.addPropertyChangeListener(this);

      final SwingWorker worker = new SwingWorker() {

         public Object construct() {
            importProgress.setIndeterminate(false);
            pdmImporter.getMetaData();
            pdmImporter.importAllEvents();

            listSelection.updateCatalog(true);
            okButton.setEnabled(true);
            setCursor(null);

            return null;
         }
      };
      worker.start();

   }//GEN-LAST:event_okButtonActionPerformed

   private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
      JFileChooser chooser = new JFileChooser();
      try {
         File f = new File(new File(".").getCanonicalPath());
         chooser.setCurrentDirectory(f);
      } catch (IOException e) {
      }
      chooser.setDialogTitle("Select PDM input file");
      chooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
      chooser.addChoosableFileFilter(new InpFilter());

      int result = chooser.showOpenDialog(listSelection);
      switch (result) {
         case JFileChooser.APPROVE_OPTION:
            File file = chooser.getSelectedFile();
            inpsHandler.addInpFile(file.getAbsolutePath());
            break;
         case JFileChooser.CANCEL_OPTION:
            break;
         case JFileChooser.ERROR_OPTION:
            break;
      }
   }//GEN-LAST:event_browseButtonActionPerformed

   class InpFilter extends javax.swing.filechooser.FileFilter {

      public boolean accept(File file) {
         String filename = file.getName();
         return (filename.endsWith(".inp") || file.isDirectory());
      }

      public String getDescription() {
         return "PDM input file (*.inp)";
      }
   }

   private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
      this.dispose();
   }//GEN-LAST:event_cancelButtonActionPerformed

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      java.awt.EventQueue.invokeLater(new Runnable() {

         public void run() {
            new PdmDialog(listSelection, true).setVisible(true);
         }
      });
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JComboBox InpCombo;
   private javax.swing.JButton browseButton;
   private javax.swing.JPanel buttonsPanel;
   private javax.swing.JButton cancelButton;
   private javax.swing.JProgressBar importProgress;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JButton okButton;
   private javax.swing.JTextArea progressMessageText;
   // End of variables declaration//GEN-END:variables
}
